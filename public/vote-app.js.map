{"version":3,"sources":["authentication/authentication.client.module.js","cookies-warning/cookies-warning.client.module.js","messages/messages.client.module.js","navigation/navigation.client.module.js","application.js","authentication/authentication.client.controller.js","authentication/user.client.factory.js","cookies-warning/cookie.client.factory.js","cookies-warning/cookies-warning.client.directive.js","cookies-warning/cookies-warning.controller.js","messages/messages.client.controller.js","messages/messages.client.directive.js","messages/messages.client.factory.js","navigation/navigation.client.controller.js","navigation/navigation.client.directive.js","vote-app/all-polls.client.controller.js","vote-app/all-polls.client.directive.js","vote-app/chart.client.controller.js","vote-app/poll.client.controller.js","vote-app/poll.client.factory.js","vote-app/vote-app.client.routes.js"],"names":["angular","module","controller","$scope","user","auth","loadUser","logOut","bind","console","log","factory","$http","$rootScope","isAuthenticated","equals","scope","get","then","res","data","$broadcast","catch","err","getUser","$cookies","isAccepted","accept","put","directive","restrict","transclude","templateUrl","cookie","$on","message","event","messages","handleErrors","map","msg","content","class","type","$window","twitterAuth","location","assign","poll","$attrs","queryParam","hasOwnProperty","_creator","_id","getPolls","limit","offset","socketFactory","$routeParams","vote","getPoll","result","transform","ioSocket","io","connect","id","mySocket","on","votePoll","deletePoll","title","options","createPoll","$location","option","label","value","push","labels","selectBoxOptions","legend","display","position","votes","owner","query","uri","Date","now","response","polls","time","range","i","count","post","split","path","delete","customOption","config","$routeProvider","$locationProvider","when","otherwise","redirect","html5Mode"],"mappings":"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","file":"vote-app.js","sourcesContent":["angular.module('authentication', []);","angular.module('cookiesWarning', ['ngCookies']);","angular.module('messages', []);","angular.module('navigation', ['authentication']);","angular.module('vote-app', ['chart.js', 'navigation', 'authentication', 'ngRoute', 'messages', 'cookiesWarning', 'btford.socket-io']);\r\n","angular.module('authentication')\r\n.controller('AuthenticationController', ['$scope', 'user', ($scope, user) => {\r\n  $scope.auth = {};\r\n  user.loadUser($scope.auth);\r\n\r\n  $scope.logOut = () => {\r\n    user.logOut.bind(null, $scope.auth)();\r\n    console.log($scope.auth);\r\n  }\r\n}]);","angular.module('authentication')\r\n.factory('user', ['$http', '$rootScope', ($http, $rootScope) => {\r\n  function isAuthenticated() {\r\n    return !angular.equals({}, user);\r\n  }\r\n  let user = {};\r\n\r\n  return {\r\n    loadUser: (scope) => {\r\n      // check if user is cached \r\n      if(!isAuthenticated()) {\r\n        $http.get('/auth/user')\r\n        .then(res => {\r\n          user = res.data;\r\n          if (isAuthenticated()) {\r\n            user.isAuthenticated = true;\r\n          }\r\n          $rootScope.$broadcast('user', user);\r\n          scope.user = user;\r\n        })\r\n        .catch(err => {\r\n          user = {\r\n            isAuthenticated: false\r\n          };\r\n          throw err;\r\n        });\r\n      } else {\r\n        scope.user = user;\r\n      }\r\n    },\r\n    getUser: () => user,\r\n    logOut: (scope) => {\r\n      $http.get('/auth/logout')\r\n      .then(() => {\r\n        user = {\r\n          isAuthenticated: false\r\n        };\r\n        scope.user = user;\r\n        $rootScope.$broadcast('user', user);\r\n      })\r\n      .catch(err => {\r\n        user = {\r\n          isAuthenticated: false\r\n        };\r\n        scope.user = user;\r\n        throw err;\r\n      });\r\n    }\r\n  }\r\n}]);\r\n","angular.module('cookiesWarning')\r\n.factory('cookie', ['$rootScope', '$cookies', ($rootScope, $cookies) => {\r\n  return {\r\n    isAccepted: () => !!$cookies.get('cookiesPolicyAccepted'),\r\n    accept: () => {\r\n      $cookies.put('cookiesPolicyAccepted', true);\r\n      $rootScope.$broadcast('cookiesPolicyAccepted');\r\n    }\r\n  }\r\n}]);","angular.module('cookiesWarning')\r\n.directive('cookiesWarning', () => {\r\n  return {\r\n    restrict: 'E',\r\n    transclude: true,\r\n    controller: 'CookiesWarningController',\r\n    templateUrl: 'views/cookies-policy.client.view.html'\r\n  }\r\n});","angular.module('cookiesWarning')\r\n.controller('CookiesWarningController', ['$scope', 'cookie', ($scope, cookie) => {\r\n  $scope.isAccepted = cookie.isAccepted();\r\n\r\n  $scope.accept = cookie.accept;\r\n\r\n  $scope.$on('cookiesPolicyAccepted', () => {\r\n    $scope.isAccepted = true;\r\n  });\r\n}]);","angular.module('messages')\r\n.controller('MessagesController', ['$scope', $scope => {\r\n  $scope.message = [];\r\n\r\n  $scope.$on('messages', (event, messages) => $scope.messages = messages);\r\n  $scope.$on('$routeChangeStart', () => $scope.messages = []);\r\n}]);\r\n","angular.module('messages')\r\n.directive('messages', () => {\r\n  return {\r\n    templateUrl: 'views/messages.client.view.html',\r\n    restrict: 'E'\r\n  }\r\n});\r\n","angular.module('messages')\r\n.factory('messages', ['$rootScope', $rootScope => {\r\n  return {\r\n    handleErrors: err => {\r\n      var messages = err.data.map(msg => {\r\n        return {\r\n          content: msg.content,\r\n          class: `alert alert-${msg.type}`\r\n        }\r\n      });\r\n\r\n      $rootScope.$broadcast('messages', messages);\r\n    }\r\n  }\r\n}]);\r\n","angular.module('navigation')\r\n.controller('NavigationController', ['$scope', '$window', ($scope, $window) => {\r\n  $scope.twitterAuth = () => $window.location.assign('/auth/twitter')\r\n}]);\r\n","angular.module('navigation')\r\n.directive('navigation', () => {\r\n  return {\r\n    templateUrl: 'views/header.client.view.html',\r\n    restrict: 'E'\r\n  }\r\n});\r\n","angular.module('vote-app')\r\n.controller('AllPollsController', ['$scope', 'poll', '$attrs', 'user', ($scope, poll, $attrs, auth) => {\r\n  let user = auth.getUser();\r\n  $scope.queryParam = {};\r\n\r\n  if ($attrs.hasOwnProperty('ownerOnly')) {\r\n    $scope.queryParam._creator = user._id;\r\n  }\r\n\r\n  poll.getPolls($scope, {\r\n    limit: 10,\r\n    offset: 0\r\n  });\r\n\r\n  $scope.getPolls = poll.getPolls.bind(null, $scope);\r\n}]);\r\n","angular.module('vote-app')\r\n.directive('allPolls', () => {\r\n  return {\r\n    controller: \"AllPollsController\",\r\n    templateUrl: 'views/all-polls.client.view.html'\r\n  }\r\n});","angular.module('vote-app')\r\n.controller('ChartController', ['$scope', 'poll', 'user', 'socketFactory', '$routeParams', ($scope, poll, user, socketFactory, $routeParams) => {\r\n  $scope.user = user.getUser();\r\n  $scope.vote = \"\";\r\n  \r\n  poll.getPoll()\r\n  .then(result => {\r\n    $scope.poll = poll.transform(result.data);\r\n\r\n    // we can join the socket.io namespace now\r\n    const ioSocket = io.connect(`/${$routeParams.id}`),\r\n    mySocket = socketFactory({ioSocket});\r\n\r\n    mySocket.on('chartUpdate', data => {\r\n      $scope.poll = poll.transform(data);\r\n    });   \r\n  });\r\n  \r\n  $scope.votePoll = poll.votePoll.bind(null, $scope);\r\n  $scope.deletePoll = poll.deletePoll;\r\n\r\n  $scope.$on('user', (event, user) => {\r\n    $scope.user = user;\r\n  });\r\n\r\n\r\n}]);","angular.module('vote-app')\r\n.controller('PollController', ['poll', '$scope', (poll, $scope) => {\r\n  $scope.poll = {\r\n    title: '',\r\n    options: ''\r\n  };\r\n\r\n  $scope.createPoll = poll.createPoll;\r\n}]);","angular.module('vote-app')\r\n.factory('poll', ['$http', '$location', '$routeParams', 'messages', ($http, $location, $routeParams, messages) => {\r\n  const factory = {\r\n    transform: data => {\r\n      let options = data.options.map(option => {\r\n        return {\r\n          label: option,\r\n          value: option\r\n        }\r\n      });\r\n\r\n      options.push({\r\n        label: \"I'd like custom option\",\r\n        value: null\r\n      });\r\n      return {\r\n        title: data.title,\r\n        labels: data.options,\r\n        selectBoxOptions: options,\r\n        options: {\r\n          legend: {\r\n            display: true,\r\n            position: 'bottom'\r\n          }\r\n        },\r\n        data: data.votes,\r\n        owner: data.owner\r\n      }\r\n    },\r\n    getPolls: (scope, query) => {\r\n      let uri = `api/polls/?limit=${query.limit}&offset=${query.offset}&time=${Date.now()}`;\r\n\r\n      if (scope.queryParam._creator) {\r\n        uri += `&user=${scope.queryParam._creator}`;\r\n      }\r\n\r\n      $http.get(uri)\r\n      .then(response => {\r\n        if (scope.polls && scope.query && scope.query.time - response.data.time > 0) {\r\n          console.log('Ignoring old request');\r\n          return;\r\n        }\r\n        scope.polls = response.data.polls;\r\n        scope.query = response.data.query;\r\n        scope.range = [];\r\n        for (let i = 0; i < response.data.query.count; i += 10) {\r\n          scope.range.push({\r\n            query: {\r\n              limit: 10,\r\n              offset: i\r\n            }\r\n          });\r\n        }\r\n      })\r\n      .catch(err => {\r\n        throw err;\r\n      });\r\n    },\r\n    createPoll: poll => {\r\n      $http.post('api/poll', {\r\n        title: poll.title,\r\n        options: poll.options.split('\\n')\r\n      })\r\n      .then(response => {\r\n        $location.path(`/poll/${response.data._id}`);\r\n      })\r\n      .catch(err => {\r\n        throw err;\r\n      });\r\n    },\r\n    getPoll: () => {\r\n      return $http.get(`/api/poll/${$routeParams.id}`)\r\n      .catch(err => {\r\n        throw err;\r\n      });\r\n    },\r\n    deletePoll: id => {\r\n      $http.delete(`/api/poll/${$routeParams.id}`)\r\n      .then(result => {\r\n        $location.path('/my-polls');\r\n      })\r\n      .catch(err => {\r\n        throw err;\r\n      })\r\n    },\r\n    votePoll: scope => {\r\n      let vote = \"\";\r\n      \r\n      if (scope.vote === null) {\r\n        vote = scope.customOption || \"\";\r\n      } else {\r\n        vote = scope.vote;\r\n      }\r\n\r\n      $http.put(`/api/poll/${$routeParams.id}`, { vote })\r\n      .then(result => {\r\n        scope.poll = factory.transform(result.data);\r\n      })\r\n      .catch(messages.handleErrors);\r\n    }\r\n  }\r\n\r\n  return factory;\r\n}]);\r\n","angular.module('vote-app')\r\n.config(['$routeProvider', '$locationProvider', ($routeProvider, $locationProvider) => {\r\n  $routeProvider\r\n  .when('/', {\r\n    templateUrl: 'views/polls.client.view.html'\r\n  })\r\n  .when('/new-poll', {\r\n    templateUrl: 'views/new-poll.client.view.html'\r\n  })\r\n  .when('/my-polls', {\r\n    templateUrl: 'views/my-polls.client.view.html'\r\n  })\r\n  .when('/poll/:id', {\r\n    templateUrl: 'views/poll.client.view.html'\r\n  })\r\n  .otherwise('/', {\r\n    redirect: '/'\r\n  });\r\n\r\n  $locationProvider.html5Mode(true);\r\n}]);\r\n"],"sourceRoot":"/source/"}